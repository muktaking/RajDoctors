{"version":3,"sources":["webpack:///./src/templates/speciality/speciality.js","webpack:///./src/templates/speciality/specialityWrapper.js"],"names":["offset","Speciality","_ref","speciality","data","intl","useIntl","pageCount","Math","ceil","allDoctorListsCsv","nodes","length","doctorsList","setDoctorsList","useState","slice","React","createElement","Container","fluid","className","formatMessage","id","string","charAt","toUpperCase","Doctors","ReactPaginate","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","_ref2","selected","containerClassName","subContainerClassName","activeClassName","memo","capitalizeFirstLetter","SpecialityWrapper","_data$allDoctorListsC","pageContext","push","apply","_toConsumableArray","allDoctorListsCopyCsv","_sortBy","reverse","toLowerCase","menuWithSynonyms","filter","item","join","top3","reduce","accumulator","currentValue","Name","locale","schema","map","doc","i","replace","fields","slug","Designation","Institute","contact1","Layout","SEO","title","description"],"mappings":"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","file":"component---src-templates-speciality-speciality-wrapper-js-2f419cc8d2874d85ea9d.js","sourcesContent":["import React, { useState } from \"react\"\nimport ReactPaginate from \"react-paginate\"\nimport { Container } from \"react-bootstrap\"\nimport { useIntl } from \"gatsby-plugin-intl\"\n//importing component\nimport Doctors from \"../../components/doctors/doctors\"\n\n// declaring some global variable\nconst perPage = 6\nlet offset = 0\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst Speciality = ({ speciality, data }) => {\n  // Making useIntl available in the code\n  const intl = useIntl()\n  const pageCount = Math.ceil(data.allDoctorListsCsv.nodes.length / perPage)\n  //const [currentPage, setCurrentPage] = useState(0)\n  const [doctorsList, setDoctorsList] = useState(\n    data.allDoctorListsCsv.nodes.slice(offset, offset + perPage)\n  )\n\n  const onHandleClick = ({ selected }) => {\n    offset = selected * perPage\n    //setCurrentPage(selected)\n    setDoctorsList(data.allDoctorListsCsv.nodes.slice(offset, offset + perPage))\n  }\n\n  return (\n    <Container fluid className=\"p-0\">\n      <div className=\"main\">\n        <div className=\"med-section\">\n          <h3 className=\"text-center\">\n            {`${intl.formatMessage({\n              id: `adl.${process.env.GATSBY_DISTRICT}`,\n            })} ${intl.formatMessage({\n              id: `${capitalizeFirstLetter(speciality)}`,\n            })}  ${intl.formatMessage({ id: \"Speciality\" })}`}\n          </h3>\n          <div className=\"divider\"></div>\n          <div className=\"med-card\">\n            <Doctors data={doctorsList} />\n          </div>\n        </div>\n        <div className=\"d-flex justify-content-center\">\n          <ReactPaginate\n            previousLabel={\"<<\"}\n            nextLabel={\">>\"}\n            breakLabel={\"...\"}\n            breakClassName={\"break-me\"}\n            pageCount={pageCount}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            onPageChange={onHandleClick}\n            containerClassName={\"pagination\"}\n            subContainerClassName={\"pages pagination\"}\n            activeClassName={\"active\"}\n          />\n        </div>\n      </div>\n    </Container>\n  )\n}\n\nexport default React.memo(Speciality)\n","import { graphql } from \"gatsby\"\nimport { useIntl } from \"gatsby-plugin-intl\"\nimport * as _ from \"lodash\"\nimport React from \"react\"\nimport Layout from \"../../components/layout\"\nimport SEO from \"../../components/seo\"\nimport { menuWithSynonyms } from \"../../utils/meta.data\"\nimport Speciality from \"./speciality\"\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nexport const query = graphql`\n  query($Speciality: String!) {\n    allDoctorListsCsv: allDoctorListsCsv(filter: { Speciality: { eq: $Speciality } }) {\n      nodes {\n        Degree\n        Name\n        Rating\n        Designation\n        Institute\n        contact1\n        loc1\n        visitTime1\n        id\n        uid\n\n        fields {\n          slug\n        }\n      }\n    }\n    allDoctorListsCopyCsv: allDoctorListsCopyCsv(filter: { Speciality: { eq: $Speciality } }) {\n      nodes {\n        Degree\n        Name\n        Rating\n        Designation\n        Institute\n        contact1\n        loc1\n        visitTime1\n        id\n        uid\n\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`\n\nconst SpecialityWrapper = ({ pageContext, data }) => {\n  \n  data.allDoctorListsCsv.nodes.push(...data.allDoctorListsCopyCsv.nodes)\n  data.allDoctorListsCsv.nodes = _.sortBy(data.allDoctorListsCsv.nodes, [\n    \"Rating\",\n  ]).reverse()\n  const intl = useIntl()\n  let speciality = pageContext.Speciality.toLowerCase()\n  speciality = menuWithSynonyms\n    .filter(item => item[0].toLowerCase() === speciality)[0]\n    .join(\" and \")\n\n  let top3 = data.allDoctorListsCsv.nodes\n    .slice(0, 3)\n    .reduce(\n      (accumulator, currentValue) => accumulator + `${currentValue.Name}; `,\n      \"\"\n    )\n  //, Contact: ${currentValue.contact1.replace(/\\*/g,\",\")}\n  top3 =\n    intl.locale === \"en\"\n      ? `Top Doctors: ${top3} at rajshahi city in bangladesh`\n      : \"- তাদের চেম্বারের লোকেশন, সময় ও সিরিয়লের নাম্বারসহ প্রয়োজনীয় তথ্য\"\n\n  const top3Schema = data.allDoctorListsCsv.nodes.slice(0, 3).map(\n    (doc, i) => `\n   {\"@type\": \"ListItem\",\n   \"position\": \"${i + 1}\",\n   \"item\": {\n    \"@type\": \"Person\",\n    \"name\": \"${doc.Name.replace(/\\*/, \",\")}\",\n    \"url\": \"${\"https://rajdoctors.com\" + `/doctor/` + doc.fields.slug}\",\n    \"jobTitle\": \"${doc.Designation.replace(/\\*/, \",\")}\",\n    \"worksFor\": {\n      \"@type\": \"Organization\",\n      \"name\": \"${doc.Institute.replace(/\\*/, \",\")}\"\n    },\n    \"telephone\": \"${doc.contact1.replace(/\\*/, \",\")}\" \n   }}\n   `\n  )\n  const schema = `{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"ItemList\",\n    \"itemListElement\": [${top3Schema}]\n  }`\n  return (\n    <Layout>\n      <SEO\n        schema={schema}\n        title={intl.formatMessage({\n          id: capitalizeFirstLetter(speciality),\n        })}\n        description={[\n          intl.formatMessage({\n            id: `adl.${process.env.GATSBY_DISTRICT}`,\n          }),\n          intl.formatMessage({\n            id: capitalizeFirstLetter(speciality),\n          }),\n          intl.formatMessage({\n            id: \"Speciality\",\n          }),\n          top3,\n        ].join(\" \")}\n      />\n      <Speciality speciality={speciality} data={data} />\n    </Layout>\n  )\n}\n\nexport default React.memo(SpecialityWrapper)\n"],"sourceRoot":""}