{"version":3,"sources":["webpack:///./src/templates/speciality/speciality.js","webpack:///./src/templates/speciality/specialityWrapper.js"],"names":["offset","Speciality","_ref","speciality","data","intl","useIntl","pageCount","Math","ceil","allDoctorListsCsv","nodes","length","doctorsList","setDoctorsList","useState","slice","React","createElement","Container","fluid","className","formatMessage","id","string","charAt","toUpperCase","Doctors","ReactPaginate","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","_ref2","selected","containerClassName","subContainerClassName","activeClassName","memo","capitalizeFirstLetter","SpecialityWrapper","_data$allDoctorListsC","pageContext","push","apply","_toConsumableArray","allDoctorListsCopyCsv","_sortBy","reverse","toLowerCase","menuWithSynonyms","filter","item","join","top3","reduce","accumulator","currentValue","Name","locale","schema","map","doc","i","replace","fields","slug","Designation","Institute","contact1","Layout","SEO","title","description"],"mappings":"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","file":"component---src-templates-speciality-speciality-wrapper-js-352ab21fd48651945cb7.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport { Container } from \"react-bootstrap\"\r\nimport { useIntl } from \"gatsby-plugin-intl\"\r\n//importing component\r\nimport Doctors from \"../../components/doctors/doctors\"\r\n\r\n// declaring some global variable\r\nconst perPage = 6\r\nlet offset = 0\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\nconst Speciality = ({ speciality, data }) => {\r\n  // Making useIntl available in the code\r\n  const intl = useIntl()\r\n  const pageCount = Math.ceil(data.allDoctorListsCsv.nodes.length / perPage)\r\n  //const [currentPage, setCurrentPage] = useState(0)\r\n  const [doctorsList, setDoctorsList] = useState(\r\n    data.allDoctorListsCsv.nodes.slice(offset, offset + perPage)\r\n  )\r\n\r\n  const onHandleClick = ({ selected }) => {\r\n    offset = selected * perPage\r\n    //setCurrentPage(selected)\r\n    setDoctorsList(data.allDoctorListsCsv.nodes.slice(offset, offset + perPage))\r\n  }\r\n\r\n  return (\r\n    <Container fluid className=\"p-0\">\r\n      <div className=\"main\">\r\n        <div className=\"med-section\">\r\n          <h3 className=\"text-center\">\r\n            {`${intl.formatMessage({\r\n              id: `adl.${process.env.GATSBY_DISTRICT}`,\r\n            })} ${intl.formatMessage({\r\n              id: `${capitalizeFirstLetter(speciality)}`,\r\n            })}  ${intl.formatMessage({ id: \"Speciality\" })}`}\r\n          </h3>\r\n          <div className=\"divider\"></div>\r\n          <div className=\"med-card\">\r\n            <Doctors data={doctorsList} />\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <ReactPaginate\r\n            previousLabel={\"<<\"}\r\n            nextLabel={\">>\"}\r\n            breakLabel={\"...\"}\r\n            breakClassName={\"break-me\"}\r\n            pageCount={pageCount}\r\n            marginPagesDisplayed={2}\r\n            pageRangeDisplayed={5}\r\n            onPageChange={onHandleClick}\r\n            containerClassName={\"pagination\"}\r\n            subContainerClassName={\"pages pagination\"}\r\n            activeClassName={\"active\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default React.memo(Speciality)\r\n","import { graphql } from \"gatsby\"\r\nimport { useIntl } from \"gatsby-plugin-intl\"\r\nimport * as _ from \"lodash\"\r\nimport React from \"react\"\r\nimport Layout from \"../../components/layout\"\r\nimport SEO from \"../../components/seo\"\r\nimport { menuWithSynonyms } from \"../../utils/meta.data\"\r\nimport Speciality from \"./speciality\"\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\nexport const query = graphql`\r\n  query($Speciality: String!) {\r\n    allDoctorListsCsv: allDoctorListsCsv(filter: { Speciality: { eq: $Speciality } }) {\r\n      nodes {\r\n        Degree\r\n        Name\r\n        Rating\r\n        Designation\r\n        Institute\r\n        contact1\r\n        loc1\r\n        visitTime1\r\n        id\r\n        uid\r\n\r\n        fields {\r\n          slug\r\n        }\r\n      }\r\n    }\r\n    allDoctorListsCopyCsv: allDoctorListsCopyCsv(filter: { Speciality: { eq: $Speciality } }) {\r\n      nodes {\r\n        Degree\r\n        Name\r\n        Rating\r\n        Designation\r\n        Institute\r\n        contact1\r\n        loc1\r\n        visitTime1\r\n        id\r\n        uid\r\n\r\n        fields {\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst SpecialityWrapper = ({ pageContext, data }) => {\r\n  \r\n  data.allDoctorListsCsv.nodes.push(...data.allDoctorListsCopyCsv.nodes)\r\n  data.allDoctorListsCsv.nodes = _.sortBy(data.allDoctorListsCsv.nodes, [\r\n    \"Rating\",\r\n  ]).reverse()\r\n  const intl = useIntl()\r\n  let speciality = pageContext.Speciality.toLowerCase()\r\n  speciality = menuWithSynonyms\r\n    .filter(item => item[0].toLowerCase() === speciality)[0]\r\n    .join(\" and \")\r\n\r\n  let top3 = data.allDoctorListsCsv.nodes\r\n    .slice(0, 3)\r\n    .reduce(\r\n      (accumulator, currentValue) => accumulator + `${currentValue.Name}; `,\r\n      \"\"\r\n    )\r\n  //, Contact: ${currentValue.contact1.replace(/\\*/g,\",\")}\r\n  top3 =\r\n    intl.locale === \"en\"\r\n      ? `Top Doctors: ${top3} at rajshahi city in bangladesh`\r\n      : \"- তাদের চেম্বারের লোকেশন, সময় ও সিরিয়লের নাম্বারসহ প্রয়োজনীয় তথ্য\"\r\n\r\n  const top3Schema = data.allDoctorListsCsv.nodes.slice(0, 3).map(\r\n    (doc, i) => `\r\n   {\"@type\": \"ListItem\",\r\n   \"position\": \"${i + 1}\",\r\n   \"item\": {\r\n    \"@type\": \"Person\",\r\n    \"name\": \"${doc.Name.replace(/\\*/, \",\")}\",\r\n    \"url\": \"${\"https://rajdoctors.com\" + `/doctor/` + doc.fields.slug}\",\r\n    \"jobTitle\": \"${doc.Designation.replace(/\\*/, \",\")}\",\r\n    \"worksFor\": {\r\n      \"@type\": \"Organization\",\r\n      \"name\": \"${doc.Institute.replace(/\\*/, \",\")}\"\r\n    },\r\n    \"telephone\": \"${doc.contact1.replace(/\\*/, \",\")}\" \r\n   }}\r\n   `\r\n  )\r\n  const schema = `{\r\n    \"@context\": \"https://schema.org\",\r\n    \"@type\": \"ItemList\",\r\n    \"itemListElement\": [${top3Schema}]\r\n  }`\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        schema={schema}\r\n        title={intl.formatMessage({\r\n          id: capitalizeFirstLetter(speciality),\r\n        })}\r\n        description={[\r\n          intl.formatMessage({\r\n            id: `adl.${process.env.GATSBY_DISTRICT}`,\r\n          }),\r\n          intl.formatMessage({\r\n            id: capitalizeFirstLetter(speciality),\r\n          }),\r\n          intl.formatMessage({\r\n            id: \"Speciality\",\r\n          }),\r\n          top3,\r\n        ].join(\" \")}\r\n      />\r\n      <Speciality speciality={speciality} data={data} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default React.memo(SpecialityWrapper)\r\n"],"sourceRoot":""}